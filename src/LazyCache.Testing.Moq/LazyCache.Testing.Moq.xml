<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LazyCache.Testing.Moq</name>
    </assembly>
    <members>
        <member name="T:LazyCache.Testing.Moq.Create">
            <summary>
                Factory for creating mocked instances.
            </summary>
        </member>
        <member name="M:LazyCache.Testing.Moq.Create.MockedCachingService">
            <summary>
                Creates a mocked caching service.
            </summary>
            <returns>A mocked caching service.</returns>
        </member>
        <member name="T:LazyCache.Testing.Moq.Extensions.MockExtensions">
            <summary>
                Extensions for mocks.
            </summary>
        </member>
        <member name="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntry``1(LazyCache.IAppCache,System.String,``0)">
            <summary>
                Sets up a cache entry.
            </summary>
            <typeparam name="T">The cache entry value type.</typeparam>
            <param name="mockedCachingService">The mocked caching service.</param>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="cacheEntryValue">The cache entry value.</param>
            <returns>The mocked caching service.</returns>
        </member>
        <member name="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntryAdd``1(LazyCache.IAppCache,System.String)">
            <summary>
                Sets up the add method for a cache entry.
            </summary>
            <typeparam name="T">The cache entry value type.</typeparam>
            <param name="mockedCachingService">The mocked caching service.</param>
            <param name="cacheEntryKey">The cache entry key.</param>
            <returns>The mocked caching service.</returns>
            <remarks>
                I've left this accessible for advanced usage. In most cases you should just use
                <see cref="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntry``1(LazyCache.IAppCache,System.String,``0)" />.
            </remarks>
        </member>
        <member name="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntryGet``1(LazyCache.IAppCache,System.String,``0)">
            <summary>
                Sets up the get methods for a cache entry.
            </summary>
            <typeparam name="T">The cache entry value type.</typeparam>
            <param name="mockedCachingService">The mocked caching service.</param>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="cacheEntryValue">The cache entry value.</param>
            <returns>The mocked caching service.</returns>
            <remarks>
                I've left this accessible for advanced usage. In most cases you should just use
                <see cref="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntry``1(LazyCache.IAppCache,System.String,``0)" />.
            </remarks>
        </member>
        <member name="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntryRemove``1(LazyCache.IAppCache,System.String)">
            <summary>
                Sets up the remove method for a cache entry.
            </summary>
            <typeparam name="T">The cache entry value type.</typeparam>
            <param name="mockedCachingService">The mocked caching service.</param>
            <param name="cacheEntryKey">The cache entry key.</param>
            <returns>The mocked caching service.</returns>
            <remarks>
                I've left this accessible for advanced usage. In most cases you should just use
                <see cref="M:LazyCache.Testing.Moq.Extensions.MockExtensions.SetUpCacheEntry``1(LazyCache.IAppCache,System.String,``0)" />.
            </remarks>
        </member>
        <member name="T:LazyCache.Testing.Moq.NoSetUpDefaultValueProvider">
            <summary>
                Default value provider for methods that have not been set up on a lazy cache mock.
            </summary>
        </member>
        <member name="M:LazyCache.Testing.Moq.NoSetUpDefaultValueProvider.#ctor(LazyCache.IAppCache)">
            <summary>
                Constructor.
            </summary>
            <param name="mockedCachingService">The mocked caching service.</param>
        </member>
        <member name="M:LazyCache.Testing.Moq.NoSetUpDefaultValueProvider.GetDefaultValue(System.Type,Moq.Mock)">
            <summary>
                Checks the last method invocation on the mock;
                if GetOrAdd or GetOrAddAsync was invoked the unexpected match is set up and the addItemFactory result will be
                returned;
                otherwise the default value for the specified type will be returned.
            </summary>
            <param name="type">The type of the requested default value.</param>
            <param name="mock">The mock on which an unexpected invocation has occurred.</param>
            <returns>
                if GetOrAdd or GetOrAddAsync was invoked the unexpected match is set up and the addItemFactory result will be
                returned;
                otherwise the default value for the specified type will be returned if the last method invocation has a return
                type.
            </returns>
        </member>
        <member name="T:LazyCache.Testing.Moq.NoSetUpInterceptor">
            <summary>
                Dynamic proxy interceptor for methods that have not been set up on a lazy cache mock.
            </summary>
        </member>
        <member name="M:LazyCache.Testing.Moq.NoSetUpInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
                Checks the last method invocation on the mock;
                if Add was invoked the unexpected match is set up;
            </summary>
            <param name="invocation">The proxied method invocation.</param>
        </member>
    </members>
</doc>
